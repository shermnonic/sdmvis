# slvis - streamline visualization of statistical deformation models
# Max Hermann, March 2015
cmake_minimum_required (VERSION 2.6)
project(slvis)


#---- CMake config ------------------------------------------------------------

# CMAKE_CURRENT_LIST_DIR only available from CMake version greater 2.8.3
# Workaround from:
# http://code.google.com/p/gqp/source/browse/cmake/Functions.cmake?name=GQP_v0.13.2
if(NOT DEFINED CMAKE_CURRENT_LIST_DIR)
  get_filename_component(CMAKE_CURRENT_LIST_DIR
    ${CMAKE_CURRENT_LIST_FILE} PATH)
endif(NOT DEFINED CMAKE_CURRENT_LIST_DIR)

# Custom CMake modules (e.g. for libQGLViewer)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/cmake)


if( WIN32 )
	ADD_DEFINITIONS(-DNOMINMAX )
endif()

set( USE_MESHTOOLS True )


#---- Dependencies ------------------------------------------------------------

#-------------------
# Custom dependencies
#-------------------
set(GLUTILS_PATH "${GLUTILS_PATH}" CACHE PATH "path to authors custom glutils")
set(GLUTILS_SOURCES
	${GLUTILS_PATH}/GL/GLConfig.h
	${GLUTILS_PATH}/GL/GLTexture.h
	${GLUTILS_PATH}/GL/GLTexture.cpp
	${GLUTILS_PATH}/GL/GLSLProgram.h
	${GLUTILS_PATH}/GL/GLSLProgram.cpp
	${GLUTILS_PATH}/GL/GLError.h	
	${GLUTILS_PATH}/GL/GLError.cpp
	${GLUTILS_PATH}/Misc/Filename.h	
	${GLUTILS_PATH}/Misc/Filename.cpp )
include_directories( ${GLUTILS_PATH} ${GLUTILS_PATH}/GL )
message(STATUS "GLUTILS_PATH = ${GLUTILS_PATH}")

set(WINTERMUTE_BASE "G:/Wintermute" CACHE PATH "path to authors custom wintermute/meshtools project")
if( USE_MESHTOOLS )	
	message(STATUS "Using meshtools library from WINTERMUTE_BASE = ${WINTERMUTE_BASE}")
	include(${WINTERMUTE_BASE}/exports/meshtools-exports.cmake)
	add_definitions(-DUSE_MESHTOOLS)
	add_definitions(-DMESHTOOLS_WITHOUT_EIGEN_SUPPORT)
	include_directories( ${WINTERMUTE_BASE}/wmute/trunk/source/meshspace/include )
	set(MESHTOOLS_LIBRARIES
		meshtools		
	)
endif()

#---------------------
# OpenMesh (optional, required for meshtools)
#---------------------
# Note: Alternatively one could also use FindOpenMesh.cmake
set(OPENMESH_INCLUDE_PATH $ENV{OPENMESH_INCLUDE_PATH} CACHE PATH 
	"Path to OpenMesh base directory.")
set(OPENMESH_LIB_PATH     $ENV{OPENMESH_LIB_PATH}     CACHE PATH 
	"Path to OpenMesh base directory.")
	
set(OPENMESH_LIBRARIES
	optimized OpenMeshCore  debug OpenMeshCored
	optimized OpenMeshTools debug OpenMeshToolsd
)	
include_directories(
	${OPENMESH_INCLUDE_PATH}
)
link_directories(
	${OPENMESH_LIB_PATH}
)
# OpenMesh\trunk\src\OpenMesh/Core/System/compiler.hh(108): fatal error C1189: #error :  "You have to define _USE_MATH_DEFINES in the compiler settings!"
add_definitions(-D_USE_MATH_DEFINES)

#-------------------
# VTK
#-------------------
find_package( VTK REQUIRED )
if( VTK_FOUND )
	include(${VTK_USE_FILE})	
	set(VTK_LIBRARIES 
			#QVTK
			#vtkWidgets
			#vtkVolumeRendering 
			vtkRendering 
			vtkGraphics
			vtkFiltering
			vtkIO
			vtkCommon
		)
endif()

#-------------------
# OpenGL, GLEW
#-------------------
find_package(OpenGL REQUIRED)
find_package(GLEW   REQUIRED)
include_directories( ${GLEW_INCLUDE_DIR} )
message(STATUS "GLEW_INCLUDE_DIR = ${GLEW_INCLUDE_DIR}")

#-------------------
# Qt4
#-------------------
find_package(Qt4 COMPONENTS QtCore QtGui QtOpenGL QtXml REQUIRED)
include(${QT_USE_FILE})

#-------------------
# libQGLViewer2
#-------------------
find_package(QGLViewer REQUIRED)
include_directories( ${QGLVIEWER_INCLUDE_DIR} )


#---- Qt4 resources & moc -----------------------------------------------------

# Qt4 resource files
set( slvis_RCCS slvis.qrc )

# moc headers
set( slvis_MOC_HDRS	
	MainWindow.h
	Viewer.h
)

# generate rules for building source files from the Qt resources
qt4_add_resources( slvis_RCC_SRCS ${slvis_RCCS} )

# generate rules for building source files that moc generates
qt4_wrap_cpp( slvis_MOC_SRCS ${slvis_MOC_HDRS} )

# not sure what the advantage of "automoc" is
qt4_automoc( ${slvis_MOC_HDRS} )

source_group("Autogenerated Moc files" FILES ${slvis_MOC_SRCS})


#---- Executables -------------------------------------------------------------

# Put source code into groups

source_group("glutils" FILES ${GLUTILS_SOURCES})

set( gui_SRCS
	Viewer.h
	Viewer.cpp
	MainWindow.h
	MainWindow.cpp
	main.cpp
	qglutils.h
	qglutils.cpp
)
source_group("gui" FILES ${gui_SRCS})

set( main_SRCS
	StreamlineRenderer.h
	StreamlineRenderer.cpp
	PointSamples.h
	PointSamples.cpp
	VolumeTextureManager.h
	VolumeTextureManager.cpp
	../sdmvis/e7/VolumeRendering/VolumeData.h
	../sdmvis/e7/VolumeRendering/VolumeData.cpp
	../sdmvis/e7/VolumeRendering/VolumeUtils.h	
	../sdmvis/e7/VolumeRendering/VolumeUtils.cpp	
)
source_group("slvis" FILES ${main_SRCS})
include_directories( ../sdmvis/e7/VolumeRendering/ )

add_executable( slvis
	${main_SRCS}
	${gui_SRCS}
	${slvis_MOC_SRCS}
	${slvis_RCC_SRCS}	
	${GLUTILS_SOURCES}
	slvis.rc            # Visual Studio resource(s), e.g. windows application icon	
)

target_link_libraries( slvis
	${QT_LIBRARIES}
	${OPENGL_LIBRARIES}
	${QGLVIEWER_LIBRARIES}
	${GLEW_LIBRARY}	
	${VTK_LIBRARIES}
	${MESHTOOLS_LIBRARIES} # optional, may be empty string
	${OPENMESH_LIBRARIES}  # optional, may be empty string
)
